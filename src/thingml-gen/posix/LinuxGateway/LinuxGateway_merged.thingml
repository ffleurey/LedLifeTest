thing StatsdLogger includes LoggerMsgs @c_header "
#include <stdlib.h>
#include <string.h>
#include <arpa/inet.h>
#include <netinet/in.h>
#include <stdio.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <unistd.h>

#define BUFLEN 512
#define NPACK 10
#define PORT 8125
" @c_global "
void diep(char *s) {
  perror(s);
  exit(1);
}" {
	provided port statsd {
		receives observation
	}
	function sendData(id : UInt8, current : Int16, voltage : Int16, brightness : Int16) do
		'char buf[BUFLEN];
	
	    struct sockaddr_in si_other;
	    int s, i, slen=sizeof(si_other);
	
	    if ((s=socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP))==-1) diep("socket");
	    memset((char *) &si_other, 0, sizeof(si_other));
		si_other.sin_family = AF_INET;
		si_other.sin_port = htons(PORT);
	
	    if (inet_aton("192.168.1.15", &si_other.sin_addr)==0) {
		  fprintf(stderr, "inet_aton() failed\n");
		  exit(1);
		}
	
	    sprintf(buf, "ledtest.led%d.voltage:%.2f|g\nledtest.led%d.current:%.1f|g\nledtest.led%d.brightness:%d|g",
	                 ' & id & ',        ' & voltage & '/1000.0f,   ' & id & ',        ' & current & '/10.0f,     ' & id & ',           ' & brightness & ');
	       
	    if (sendto(s, buf, strlen(buf), 0, (struct sockaddr *)&si_other, slen)==-1) {
		    diep("sendto()");
		}
	
	    close(s);
	
	    //printf("SENT: \n%s\n\n", buf);'
	end
	statechart SC init READY {
		state READY {
			internal
			event o : statsd?observation
			action sendData(o.id, o.current, o.voltage, o.brightness)
		}
	}
}
thing LinuxGateway includes LoggerMsgs , TimerMsgs @c_header "#include <stdlib.h>" {
	required port sensor {
		sends requestMeasurement receives observation
	}
	required port clock {
		sends timer_start sends timer_cancel receives timer_timeout
	}
	statechart Main init RUNNING {
		on entry print "Gateway has started\n"
		state RUNNING {
			property id : Int8 = 0
			on entry clock!timer_start(0, 2000)
			internal
			event e : sensor?observation
			action do
			end
			transition -> RUNNING
			event e : clock?timer_timeout
			guard e.id == 0
			action do
				sensor!requestMeasurement(id)
				id = id + 1
				if (id > 5) id = 0
			end
		}
	}
}
thing LoggerMsgs {
	message requestMeasurement(id : UInt8)
	@code "10" message observation(id : UInt8, current : Int16, voltage : Int16, brightness : Int16)
	@code "20"
}
thing fragment TimerMsgs {
	message timer_start(id : UInt8, time : UInt32)
	@timer_start "true" message timer_cancel(id : UInt8)
	@timer_cancel "true" message timer_timeout(id : UInt8)
	@timeout "true"
	message io_clock()
	@xms_tic "10" message fps_clock()
	@xms_tic "33" message ui_clock()
	@xms_tic "231"
}
datatype Char<1>
	@type_checker "Integer"
	@c_type "char"
	@c_byte_size "1"
object String
	@type_checker "String"
	@c_type "char *"
	@c_byte_size "2"
datatype Boolean<1>
	@type_checker "Boolean"
	@c_type "uint8_t"
	@c_byte_size "1"
datatype UInt8<1>
	@type_checker "Integer"
	@c_type "uint8_t"
	@c_byte_size "1"
datatype UInt16<2>
	@type_checker "Integer"
	@c_type "uint16_t"
	@c_byte_size "2"
	@java_type "int"
	@java_primitive "true"
datatype Int8<1>
	@type_checker "Integer"
	@c_type "int8_t"
	@c_byte_size "1"
datatype Int16<2>
	@type_checker "Integer"
	@c_type "int16_t"
	@c_byte_size "2"
datatype UInt32<4>
	@type_checker "Integer"
	@c_type "uint32_t"
	@c_byte_size "4"
datatype Integer<2>
	@type_checker "Integer"
	@c_type "int16_t"
	@c_byte_size "2"
datatype Long<4>
	@type_checker "Integer"
	@c_type "long"
	@c_byte_size "4"
datatype Float<4>
	@type_checker "Real"
	@c_type "float"
	@c_byte_size "4"
enumeration DigitalState
	@c_byte_size "1"
	@c_type "uint8_t"
	{
	LOW @enum_val "0"
	HIGH @enum_val "1"
}
datatype Byte<1>
	@type_checker "Integer"
	@c_type "uint8_t"
	@c_byte_size "1"
	@java_type "byte"
	@java_primitive "true"
	@scala_type "Byte"
	@SenML_type "Double"
enumeration DigitalState
	@c_type "uint8_t"
	@c_byte_size "1"
	{
	LOW @enum_val "0"
	HIGH @enum_val "1"
}
protocol Serial
	@serializer "Binary"
	@baudrate "115200"
	@serial_path_to_device "/dev/ttyLedTest" ;

protocol Timer ;

configuration LinuxGateway {
	instance gw : LinuxGateway
	instance log : StatsdLogger
	connector gw.clock over Timer
	connector gw.sensor over Serial
	connector log.statsd over Serial
}
